# -*- coding: utf-8 -*-
"""FFML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ucKE0UmFgzup0rv7k1KLkabzO69X7wUW
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import sklearn as sk
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression
import seaborn as sns
from sklearn import metrics
from sklearn.model_selection import cross_val_score
from sklearn.metrics import f1_score, make_scorer
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
lr = LogisticRegression(fit_intercept=False)
plt.style.use('ggplot')

# %matplotlib inline
# %config InlineBackend.figure_format = 'retina'

from google.colab import files
uploaded = files.upload()
file = pd.ExcelFile("Raw Data 10yrs_v4.xlsx")

data = pd.read_excel(file, "All")

qb_data = data.loc[data['FantPos'] == "QB"]
qb_train = qb_data.loc[qb_data["GS"] >= 12]
qb_trainX = qb_train.loc[qb_train["Year"] == 2015]
qb_trainY = qb_train.loc[qb_train["Year"] == 2016]
qb_testY = qb_train.loc[qb_train["Year"] == 2017]
qb_training_set = pd.merge(qb_trainX, qb_trainY, on="Name", how="inner")
qb_testing_set = pd.merge(qb_trainY, qb_testY, on="Name", how="inner")
# print(qb_testing_set)

rb_data = data.loc[data['FantPos'] == "RB"]
rb_train = rb_data.loc[rb_data["GS"] >= 10]
rb_trainX = rb_train.loc[rb_train["Year"] == 2015]
rb_trainY = rb_train.loc[rb_train["Year"] == 2016]
rb_testY = rb_train.loc[rb_train["Year"] == 2017]
rb_training_set = pd.merge(rb_trainX, rb_trainY, on="Name", how="inner")
rb_testing_set = pd.merge(rb_trainY, rb_testY, on="Name", how="inner")
# print(rb_testing_set)

wr_data = data.loc[data['FantPos'] == "WR"]
wr_train = wr_data.loc[wr_data["GS"] >= 12]
wr_trainX = wr_train.loc[wr_train["Year"] == 2015]
wr_trainY = wr_train.loc[wr_train["Year"] == 2016]
wr_testY = wr_train.loc[wr_train["Year"] == 2017]
wr_training_set = pd.merge(wr_trainX, wr_trainY, on="Name", how="inner")
wr_testing_set = pd.merge(wr_trainY, wr_testY, on="Name", how="inner")
# print(wr_testing_set)

te_data = data.loc[data['FantPos'] == "TE"]
te_train = te_data.loc[te_data["GS"] >= 10]
te_trainX = te_train.loc[te_train["Year"] == 2015]
te_trainY = te_train.loc[te_train["Year"] == 2016]
te_testY = te_train.loc[te_train["Year"] == 2017]
te_training_set = pd.merge(te_trainX, te_trainY, on="Name", how="inner")
te_testing_set = pd.merge(te_trainY, te_testY, on="Name", how="inner")
# print(te_testing_set)

from sklearn.linear_model import LinearRegression
qb_lr = LinearRegression()

features = [ "Att_x", "Yds_x", "TD_x"]
qb_lr.fit(qb_training_set[features], qb_training_set["PosRank_y"])
prediction = qb_lr.predict(qb_testing_set[features])
qb_lr.score(qb_testing_set[features], qb_testing_set["PosRank_y"])
# print(prediction)

rb_lr = LinearRegression()

features = ["Rec_x", "Att.1_x", "Yds.1_x", "TD.1_x", "Y/A_x"]
rb_lr.fit(rb_training_set[features], rb_training_set["PosRank_y"])
prediction = rb_lr.predict(rb_testing_set[features])
rb_lr.score(rb_testing_set[features], rb_testing_set["PosRank_y"])
# print(prediction, rb_testing_set["Name"])

wr_lr = LinearRegression()

features = ["Rec_x", "Y/R_x", "TD.2_x"]
wr_lr.fit(wr_training_set[features], wr_training_set["PosRank_y"])
prediction = wr_lr.predict(wr_testing_set[features])
wr_lr.score(wr_testing_set[features], wr_testing_set["PosRank_y"])

te_lr = LinearRegression()

features = ["Rec_x", "Y/R_x", "TD.2_x"]
te_lr.fit(te_training_set[features], te_training_set["PosRank_y"])
prediction = te_lr.predict(te_testing_set[features])
te_lr.score(te_testing_set[features], te_testing_set["PosRank_y"])



"""The first problem encountered was choosing a target and features.
The target is the future season fantasy position rank, which turns out is very difficult to predict. The second problem was setting up the data so that we are using, for example, the 2015 season data to predict the 2016 season end of season ranking. This is difficult with the data as there is a lot of variance between players between seasons due to rookies, injuries, and depth chart change. To avoid this I used a inner join merge, which essentially merges data together on a shared value. So I filtered out all players that did not start over 10-12 games depending on the position. After that I merged together the two dataframes from for example the 2015 and 2016 seasons containing qb's that had started over 12 games. When merging, I merged based on name as the shared value, because if a player did not start over 12 games in both seasons their data was meaningful. 

I was now able to use the sklearn linear regression model to fit, predict, and score, the quarterback, runningback, wide reciever, and tight end position. The linear regression model performed best with the tight end position and worst with the quarterback position. I plan on changing models to compare performance between models. 

I hope to find data for the upcoming season to predict the future bright performers in the NFL and have a fantasy advantage in my upcoming drafts.
"""





